apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-db-deployment
  namespace: {{ .Values.nameSpace }}
spec:
  selector:
    matchLabels:
      app: users-db-pod
  template:
    metadata:
      labels:
        app: users-db-pod
    spec:
      containers:
      - name: users-db
        image: postgres:latest
        imagePullPolicy: Always
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        ports:
        - name: users-db-port
          containerPort: 5432
        readinessProbe:
          exec:
            command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
          initialDelaySeconds: 20
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
          initialDelaySeconds: 30
          timeoutSeconds: 10
        volumeMounts:
        - name: init-users-db
          mountPath: "/docker-entrypoint-initdb.d/"
          readOnly: true
        - name: users-db-mount
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: init-users-db
        configMap:
          name: postgres-config-map
          items:
          - key: "init.users.db"
            path: "initdb.sql"
      - name: users-db-mount
        persistentVolumeClaim:
          claimName: users-db-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: posts-db-deployment
  namespace: {{ .Values.nameSpace }}
spec:
  selector:
    matchLabels:
      app: posts-db-pod
  template:
    metadata:
      labels:
        app: posts-db-pod
    spec:
      containers:
      - name: posts-db
        image: postgres:latest
        imagePullPolicy: Always
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        ports:
        - name: posts-db-port
          containerPort: 5432
        readinessProbe:
          exec:
            command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
          initialDelaySeconds: 20
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
          initialDelaySeconds: 30
          timeoutSeconds: 10
        volumeMounts:
        - name: init-posts-db
          mountPath: "/docker-entrypoint-initdb.d/"
          readOnly: true
        - name: posts-db-mount
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: init-posts-db
        configMap:
          name: postgres-config-map
          items:
          - key: "init.posts.db"
            path: "initdb.sql" 
      - name: posts-db-mount
        persistentVolumeClaim:
          claimName: posts-db-pvc         
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-app-deployment
  namespace: {{ .Values.nameSpace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: user-app-pod
  template:
    metadata:
      labels:
        app: user-app-pod
    spec:
      containers:
      - name: user-app
        image: epamstanislavmenko/users-application:1.1.0
        imagePullPolicy: Always
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: postgres-config-map
              key: SPRING_USER_DATASOURCE_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          valueFrom:
            configMapKeyRef:
              name: postgres-config-map
              key: SPRING_JPA_HIBERNATE_DDL_AUTO
        ports:
        - name: user-app-port
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /health
            port: user-app-port
          initialDelaySeconds: 50
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: user-app-port
          initialDelaySeconds: 70
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: post-app-deployment
  namespace: {{ .Values.nameSpace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: post-app-pod
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: post-app-pod
    spec:
      containers:
      - name: post-app
        image: epamstanislavmenko/posts-application:1.1.0
        imagePullPolicy: Always
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: postgres-config-map
              key: SPRING_POST_DATASOURCE_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          valueFrom:
            configMapKeyRef:
              name: postgres-config-map
              key: SPRING_JPA_HIBERNATE_DDL_AUTO
        - name: USERS_APP_API
          valueFrom:
            configMapKeyRef:
              name: postgres-config-map
              key: USERS_APP_API
        ports:
        - name: post-app-port
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /health
            port: post-app-port
          initialDelaySeconds: 50
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: post-app-port
          initialDelaySeconds: 70
          periodSeconds: 10